pipeline {
  agent {
    docker {
      image 'smrmaheshkumar/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  
  environment {
    // Shared environment variables
    DOCKER_IMAGE = "smrmaheshkumar/ultimate-cicd:${BUILD_NUMBER}"
    NEXUS_REGISTRY = "35.95.110.234:5000"
    NEXUS_IMAGE = "${NEXUS_REGISTRY}/ultimate-cicd:${BUILD_NUMBER}"
    SONAR_URL = "http://54.187.40.41:9000"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "smrmaheshkumar"
  }
  
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', 
        url: 'https://github.com/smrmaheshkumar/Jenkins-Zero-To-Hero.git'
      }
    }

    stage('Build and Test') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh 'mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh "docker build -t ${DOCKER_IMAGE} ."
          }
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            docker.image("${DOCKER_IMAGE}").push()
          }
        }
      }
    }

    stage('Push Docker Image to Nexus') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'nexus-docker-cred', 
          usernameVariable: 'NEXUS_USER', 
          passwordVariable: 'NEXUS_PASS'
        )]) {
          script {
            // Solution 1: Use insecure registry flag (temporary solution)
            sh """
              docker tag ${DOCKER_IMAGE} ${NEXUS_IMAGE}
              docker --config /tmp/.docker login ${NEXUS_REGISTRY} \
                -u ${NEXUS_USER} -p ${NEXUS_PASS}
              docker --config /tmp/.docker push ${NEXUS_IMAGE}
              rm -rf /tmp/.docker
            """
            
            // Alternative Solution 2: Configure Docker daemon properly (recommended)
            // You should configure your Jenkins nodes with /etc/docker/daemon.json:
            // {
            //   "insecure-registries": ["35.95.110.234:5000"]
            // }
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh """
            git config --global user.email "smr.maheshkumar@gmail.com"
            git config --global user.name "smrmaheshkumar"
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
            git add deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
          """
        }
      }
    }
  }
}
